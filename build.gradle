buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        //classpath 'org.apache.groovy:groovy:4.0.19'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id 'org.groovymc.modsdotgroovy' version '1.4.1'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'parchment', version: '2023.09.03-1.20.1' //Parchment mappings

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--username', 'Client2'
        }

        client2 {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--username', 'Client2'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    //add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.mixins.compat.iris.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        name = 'Modding Inquisition Releases'
        url = 'https://maven.moddinginquisition.org/releases'
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        name = "Jared's maven" //JEI
        url = "https://maven.blamejared.com/"
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:4.7.1.2")
    implementation("com.eliotlash.mclib:mclib:20")
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    compileOnly(fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2"))
    compileOnly(fg.deobf("curse.maven:oculus-581495:6020952"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    implementation fg.deobf("curse.maven:playeranimator-658587:4587214")
    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:6608233")
    implementation fg.deobf("curse.maven:selene-499980:6611244")
    implementation fg.deobf("curse.maven:first-aid-276837:5531834")
    implementation fg.deobf("curse.maven:legendary-survival-overhaul-840254:6680779")
    //implementation fg.deobf("curse.maven:rhino-416294:6186971")
    minecraftLibrary(jarJar('org.mozilla:rhino:1.8.0')) {
        jarJar.ranged(it, "[1.8.0,)")
    }
    //Groovy

    //compileOnly 'org.groovymc.gml:gml:4.0.0'
    //runtimeOnly('org.groovymc.gml:gml:4.0.0:all') {
    //    exclude module: 'transform'
    //}

    //jarJar('org.groovymc.gml:gml:4.0.0:all') {
    //    jarJar.ranged(it, "[4.0.0,)")
    //    exclude module: 'transform'
    //}

    //compileOnly('org.codehaus.groovy:groovy:3.0.25')

    //jarJar('org.codehaus.groovy:groovy:3.0.25') {
    //    jarJar.ranged(it, "[3.0.25,)")
    //}
    // CommonGroovyLibrary (bundled with GML)
    //jarJar('org.groovymc.cgl:cgl-1.20-forge:0.3.7') {
    //    jarJar.ranged(it, "[0.3.7,)")
    //}

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
